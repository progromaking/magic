
Функция ПутьККаталогуСоСлешем(ПутьККаталогуСоСлешемИлиБез)
	
	Файл = Новый Файл(ПутьККаталогуСоСлешемИлиБез);
	Возврат Файл.ПолноеИмя + ПолучитьРазделительПути();
	
КонецФункции

// Возвращает путь к каталогу без слеша.
// Если файл существует, то имя файла возвращается с учетом регистра, как в файловой системе
Функция ПолучитьПутьКФайлуВСтандартномФормате(ИсходныйПуть)
	НайденныеФайлы = НайтиФайлы(ИсходныйПуть);
	Если НайденныеФайлы.Количество() Тогда
		Возврат НайденныеФайлы[0].ПолноеИмя;
	КонецЕсли;
	
	Файл = Новый Файл(ИсходныйПуть);
	Возврат Файл.ПолноеИмя;
КонецФункции


// Копирует все файлы в указанном каталоге в другой каталог.
//
// Параметры:
//   Результат - Структура - Результат копирования.
//       * ВозниклаОшибка           - Булево - Истина когда все файлы скопированы.
//       * ИнформацияОбОшибке       - ИнформацияОбОшибке - Информация об ошибке.
//       * ПолноеИмяСбойногоФайла   - Строка - Полное имя файла, при копировании которого возникла ошибка.
//       * СкопированныеФайлыИПапки - Массив - Полные имена файлов и папок приемника.
//       * ОригинальныеФайлыИПапки  - Массив - Полные имена файлов и папок источника.
//   КаталогИсточника  - Строка - прежнее имя каталога.
//   КаталогПриемника  - Строка - новое имя каталога.
// Взято из БСП 2.3 (модуль РаботаСФайламиСлужебныйКлиент)
Процедура КопироватьСодержимоеКаталога(Результат, КаталогИсточника, КаталогПриемника)
	
	Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат = Новый Структура;
		Результат.Вставить("ВозниклаОшибка",           Ложь);
		Результат.Вставить("ПолноеИмяСбойногоФайла",   "");
		Результат.Вставить("ИнформацияОбОшибке",       "");
		Результат.Вставить("СкопированныеФайлыИПапки", Новый Массив);
		Результат.Вставить("ОригинальныеФайлыИПапки",  Новый Массив);
	КонецЕсли;
	
	КаталогПриемника = ДобавитьКонечныйРазделительПути(КаталогПриемника);
	КаталогИсточника = ДобавитьКонечныйРазделительПути(КаталогИсточника);
	
	СоздатьКаталог(КаталогПриемника);
	
	Результат.СкопированныеФайлыИПапки.Добавить(КаталогПриемника);
	Результат.ОригинальныеФайлыИПапки.Добавить(КаталогИсточника);
	
	ФайлыИсточника = НайтиФайлы(КаталогИсточника, "*");
	
	Для Каждого ФайлИсточника Из ФайлыИсточника Цикл
		
		ФайлИсточникаПолноеИмя = ФайлИсточника.ПолноеИмя;
		ФайлИсточникаИмя       = ФайлИсточника.Имя;
		ФайлПриемникаПолноеИмя = КаталогПриемника + ФайлИсточникаИмя;
		
		Если ФайлИсточника.ЭтоКаталог() Тогда
			
			КопироватьСодержимоеКаталога(Результат, ФайлИсточникаПолноеИмя, ФайлПриемникаПолноеИмя);
			Если Результат.ВозниклаОшибка Тогда
				Возврат;
			КонецЕсли;
			
		Иначе
			
			Результат.ОригинальныеФайлыИПапки.Добавить(ФайлИсточникаПолноеИмя);
			
			ФайлПриемника = Новый Файл(ФайлПриемникаПолноеИмя);
			Если ФайлПриемника.Существует() Тогда
				// Это нужно для обратного копирования - в этом случае файлы уже могут существовать.
				Результат.СкопированныеФайлыИПапки.Добавить(ФайлПриемникаПолноеИмя);
			Иначе
				Попытка
					КопироватьФайл(ФайлИсточникаПолноеИмя, ФайлПриемникаПолноеИмя);
				Исключение
					Результат.ВозниклаОшибка         = Истина;
					Результат.ИнформацияОбОшибке     = ИнформацияОбОшибке();
					Результат.ПолноеИмяСбойногоФайла = ФайлИсточникаПолноеИмя;
					Возврат;
				КонецПопытки;
				Результат.СкопированныеФайлыИПапки.Добавить(ФайлПриемникаПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет к переданному пути каталога конечный символ-разделитель, если он отсутствует.
//
// Параметры:
//  ПутьКаталога - Строка - путь к каталогу.
//
// Возвращаемое значение:
//  Строка - путь к каталогу с конечным символом-разделителем.
//
// Примеры использования:
//  Результат = ДобавитьКонечныйРазделительПути("C:\Мой каталог"); // возвращает "C:\Мой каталог\".
//  Результат = ДобавитьКонечныйРазделительПути("C:\Мой каталог\"); // возвращает "C:\Мой каталог\".
//  Результат = ДобавитьКонечныйРазделительПути("%APPDATA%"); // возвращает "%APPDATA%\"
// Взято из БСП 2.3 (модуль ОбщегоНазначенияКлиентСервер)
//
Функция ДобавитьКонечныйРазделительПути(Знач ПутьКаталога, Знач Удалить_Платформа = Неопределено) Экспорт
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПути();
	
	Если Прав(ПутьКаталога,1) = ДобавляемыйСимвол Тогда
		Возврат ПутьКаталога;
	Иначе 
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
КонецФункции

Функция ПолучитьИмяФайлаСПостфиксом(ПолныйПутьКФайлу, Постфикс) Экспорт
	// ПолныйПутьКФайлу : например, "C:\Мой файл.txt"
	// Постфикс : например, " (без пароля)"
	// Результат: "C:\Мой файл (без пароля).txt"
	
	Файл = Новый Файл(ПолныйПутьКФайлу);
	РасширениеФайла = Файл.Расширение;  // вернет, например ".txt"
	
	Возврат Лев(ПолныйПутьКФайлу, СтрДлина(ПолныйПутьКФайлу) - СтрДлина(РасширениеФайла))
				+ Постфикс
				+ Прав(ПолныйПутьКФайлу, СтрДлина(РасширениеФайла));
	
КонецФункции

Функция ПолучитьИмяВременногоКаталога() Экспорт
	Возврат ПолучитьИмяВременногоФайла("");
КонецФункции

Функция ВыбратьФайл(СтруктураПараметров = Неопределено, РежимДиалога = Неопределено)
	// СтруктураПараметров:
	// Фильтр - Пример: "Формат JPEG (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
	//					+ "Формат TIFF (*.tif)|*.tif|"
	// ПолноеИмяФайла - начальное полное имя
	// Каталог - начальное значение каталога
	// Расширение - расширение по умолчанию
	// Заголовок
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	Если РежимДиалога = Неопределено Тогда
		РежимДиалога = РежимДиалогаВыбораФайла.Открытие;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	
	Если СтруктураПараметров.Свойство("Каталог") = Ложь
		И СтруктураПараметров.Свойство("ПолноеИмяФайла") = Истина 
		И ЗначениеЗаполнено(СтруктураПараметров.ПолноеИмяФайла) Тогда
		Файл = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);
		ДиалогВыбораФайла.Каталог = Файл.Путь;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Заголовок") = Ложь Тогда
		Если РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
			ДиалогВыбораФайла.Заголовок = "Выберите каталог";
		Иначе
			ДиалогВыбораФайла.Заголовок = "Выберите файл";
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДиалогВыбораФайла, СтруктураПараметров);
	
	#Если Клиент Тогда
		
	Если СтруктураПараметров.Свойство("Оповещение") Тогда
		
		ДиалогВыбораФайла.Показать(СтруктураПараметров.Оповещение);
		Возврат Неопределено;
		
	КонецЕсли;
	
	#КонецЕсли
	
	Если НЕ ДиалогВыбораФайла.Выбрать() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога Тогда
		Возврат ДиалогВыбораФайла.Каталог;
	Иначе
		Возврат ДиалогВыбораФайла.ВыбранныеФайлы;
	КонецЕсли;
	
КонецФункции

Процедура ПримерыРаботыСЧтениемЗаписьюZIP()
	
	// поместить все обработки в архив
	ИсходныйКаталог = "C:\Users\yur\Desktop\Временные\";
	НовыйФайл = ИсходныйКаталог + "temp.zip";
	
	ЗаписьZIP = Новый ЗаписьZipФайла(НовыйФайл);
	ЗаписьZIP.Добавить(	ИсходныйКаталог + "*.epf", 
						РежимСохраненияПутейZIP.НеСохранятьПути, 
						РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
	ЗаписьZIP.Записать();
	
КонецПроцедуры


Процедура ПримерРаботыСЧтениемJSON()
	
// Содержание файла:
//{
//	"поле1": 20.5,
//	"поле2": "тест"
//}
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл("C:\Users\yur\Desktop\Временные\1.txt");
	
	Данные = ПрочитатьJSON(Чтение);  // в данном слуючае вернется структура
	
	Для Каждого КлючИЗначение Из Данные Цикл
		Сообщить(КлючИЗначение.Ключ+": " + КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры
