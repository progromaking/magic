
Функция ИдентификаторПеречисленияПоСсылке(ЗначениеПеречисления) Экспорт
	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;

КонецФункции

// Взято из БСП 2.3. Заменены некоторые строковые функции, появившиеся в 8.3.6
Функция СтроковоеПредставлениеТипа(Тип) Экспорт
	
	Представление = "";
	
	Если ЭтоСсылка(Тип) Тогда
	
		ПолноеИмя = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
		//ИмяОбъекта = СтрРазделить(ПолноеИмя, ".")[1];
		ИмяОбъекта = РазложитьСтрокуВМассивПодстрок(ПолноеИмя, ".")[1];
		
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "СправочникСсылка";
		
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ДокументСсылка";
		
		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "БизнесПроцессСсылка";
		
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовХарактеристикСсылка";
		
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланСчетовСсылка";
		
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовРасчетаСсылка";
		
		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ЗадачаСсылка";
		
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланОбменаСсылка";
		
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПеречислениеСсылка";
		
		КонецЕсли;
		
		Результат = ?(Представление = "", Представление, Представление + "." + ИмяОбъекта);
		
	Иначе
		
		//Результат = Строка(Тип);
		Результат = СтрЗаменить(ТРег(Тип), " ", "");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	//Позиция = СтрНайти(Строка, Разделитель);
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		//Позиция = СтрНайти(Строка, Разделитель);
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
Функция ЭтоСсылка(Тип) Экспорт
	
	Возврат Тип <> Тип("Неопределено") 
		И (Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип));
	
КонецФункции


Функция ПустоеЗначениеТипа(ЗаданныйТип) Экспорт

    Если ЗаданныйТип = Тип("Число") Тогда
        Возврат 0;

    ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
        Возврат "";

    ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
        Возврат '00010101000000';

    ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
        Возврат Ложь;

    Иначе
        Возврат Новый (ЗаданныйТип);

    КонецЕсли;

КонецФункции

Функция ПолучитьИдентификаторВариантаПериода(Вариант)
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	ОбъектXDTO = Сериализатор.ЗаписатьXDTO(Вариант);	
	
	ЗаписьXML = Новый ЗаписьXML; 
	ЗаписьXML.УстановитьСтроку("UTF-8"); 
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO,,,,НазначениеТипаXML.Явное); 
	
	Строка = ЗаписьXML.Закрыть();
	
	ЧтениеXML=Новый ЧтениеXML(); 
	ЧтениеXML.УстановитьСтроку(Строка);
	ЧтениеXML.Прочитать();
	
	ПостроительDOM = Новый ПостроительDOM;
	
	ОбъектDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	НайденныеУзлы = ОбъектDOM.ПолучитьЭлементыПоИмени("StandardPeriodVariant");
	
	Для каждого Узел из НайденныеУзлы Цикл
		Результат = Узел.ТекстовоеСодержимое;
	КонецЦикла;
			
	Возврат Результат;		
	
КонецФункции

Функция Это82() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если Найти(СистемнаяИнформация.ВерсияПриложения, "8.2.") = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяКоллекцииМетаданныхПоТипу(Тип)
	
	Если НРег(Тип) = "справочник" Тогда
		Возврат "Справочники";
	ИначеЕсли НРег(Тип) = "документ" Тогда
		Возврат "Документы";
	ИначеЕсли Найти(НРег(Тип), "план") = 1 Тогда
		Возврат Лев(Тип, 4) + "ы" + Сред(Тип, 5);
	ИначеЕсли Найти(НРег(Тип), "регистр") = 1 Тогда
		Возврат Лев(Тип, 7) + "ы" + Сред(Тип, 8);
	ИначеЕсли НРег(Тип) = "задача" Тогда
		Возврат "Задачи";
	ИначеЕсли НРег(Тип) = "бизнеспроцесс" Тогда
		Возврат "БизнесПроцессы";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТипПоИмениМетаданных(ПолноеИмяМетаданных)
	
	ИмяМетаданныхПоСтрокам = СтрЗаменить(ПолноеИмяМетаданных, ".", Символы.ПС);
	МетаданныеВида = Метаданные.НайтиПоПолномуИмени(СтрПолучитьСтроку(ИмяМетаданныхПоСтрокам, 1) + "." + СтрПолучитьСтроку(ИмяМетаданныхПоСтрокам,2));
	Если МетаданныеВида = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Метаданные.Документы.Содержит(МетаданныеВида) Тогда
		МенеджерВида = Документы;
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеВида) Тогда
		МенеджерВида = Справочники;
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеВида) Тогда
		МенеджерВида = ПланыВидовХарактеристик;
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеВида) Тогда
		МенеджерВида = ПланыСчетов;
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеВида) Тогда
		МенеджерВида = ПланыВидовРасчета;
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеВида) Тогда
		МенеджерВида = ПланыОбмена;
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеВида) Тогда
		МенеджерВида = БизнесПроцессы;
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеВида) Тогда
		МенеджерВида = Задачи;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТипЗнч(МенеджерВида[МетаданныеВида.Имя].ПустаяСсылка());
	
КонецФункции
