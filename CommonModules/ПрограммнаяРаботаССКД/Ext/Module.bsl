
Процедура ВывестиСКДВТабличныйДокумент(МакетСКД, ТабличныйДокумент, КомпоновщикНастроек = Неопределено, ДанныеРасшифровки = Неопределено) 
	
	Если КомпоновщикНастроек = Неопределено Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);		
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();  
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетСКД, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
// Пример вызова из отчета	
//Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь; 
//	ПрограммнаяРаботаССКД.ВывестиСКДВТабличныйДокумент(СхемаКомпоновкиДанных, ДокументРезультат, КомпоновщикНастроек);
//	
//КонецПроцедуры	
	
КонецПроцедуры

Функция ПолучитьТаблицуЗначенийИзСКД(МакетСКД, КомпоновщикНастроек) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();  
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетСКД, Настройки,,,
				Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат Результат;
	
КонецФункции


Процедура УстановитьЗначениеПараметра(ОтчетОбъект, ИмяПараметра, Значение) Экспорт
    
    ПараметрыОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных;
    
    Параметр = ПараметрыОтчета.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
    Параметр.Использование = Истина;
    Параметр.Значение = Значение;
    
КонецПроцедуры

Функция ПолучитьЗначениеПараметра(ОтчетОбъект, ИмяПараметра) Экспорт
    
    ПараметрыОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных;
    
    Параметр = ПараметрыОтчета.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
    Возврат Параметр.Значение;
    
КонецФункции


Процедура УстановитьЗначениеПараметраПользовательскихНастроек(ПользовательскиеНастройки, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	Для Каждого Элемент Из ПользовательскиеНастройки.Элементы Цикл
		Если НЕ ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ""+Элемент.Параметр = ИмяПараметра Тогда
			Продолжить;
		КонецЕсли;
		Элемент.Значение = ЗначениеПараметра;
		Элемент.Использование = Истина;
		
		Возврат;
		
	КонецЦикла;
	
	// пример вызова:
	// ПользовательскиеНастройки = ПолучитьПользовательскиеНастройкиОтчетаНаСервере("ГПН_СправкаОНаличииНПДляСобственника");
	// УстановитьЗначениеПараметраПользовательскиНастройки(ПользовательскиеНастройки, "Период", Дата(2016,1,1));
	
КонецПроцедуры

Процедура ДобавитьПараметрПользовательскихНастроек(СхемаКомпоновкиДанных, ИмяПараметра) Экспорт
	
	ПараметрКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Добавить();
    ПараметрКомпоновки.Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
    ПараметрКомпоновки.Использование = Истина;
	
	ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрСхемы.Имя = ИмяПараметра;
	
КонецПроцедуры

Функция ПолучитьПользовательскиеНастройкиОтчетаНаСервере(ИмяОтчета) Экспорт
	ОтчетОбъект = Отчеты[ИмяОтчета].Создать();
	Возврат ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
КонецФункции

// {{****************************************************************************
//    ШАБЛОНЫ ДЛЯ ИСПОЛЬЗОВАНИЯ СКД - http://infostart.ru/public/80164/
// 
//****************************************************************************
// Заполняет переданный объект на основании СКД
//
// Параметры
//
//  схемаСКД – схема СКД
//
//  ОбъектДляЗагрузки – объект в который выгружаются данные, таблица значений, дерево значений, табличный документ
//
//  ИсполняемыеНастройки – Пользовательские настройки СКД, если не указаны, будут использованы настройки СКД по умолчанию
//
//  СтруктураПараметров - Структура – Передаваемые для СКД параметры
//
//	В итоге получение данных сводится к трем простым действиям:
//		1. Написать запрос и настроить СКД  
//	в любой консоли, позволяющей это сделать.
//		2. Выгрузить настройки из консоли и загрузить в макет
//		3. Написать в необходимом месте код типа:
//
//		ДеревоЗначений = Новый ДеревоЗначений;
//		СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
//		СтруктураПараметров = Новый Структура("ДатаОтчета", НашаДата);
//		ПолучитьДанныеНаОснованииСКД(СхемаКомпоновкиДанных, ДеревоЗначений, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, СтруктураПараметров);
//
Процедура ПолучитьДанныеНаОснованииСКД(схемаСКД, ОбъектДляЗагрузки, ИсполняемыеНастройки = Неопределено, СтруктураПараметров = Неопределено, РасшифровкаСКД = Неопределено, МакетКомпоновки = Неопределено, ВнешниеНаборыДанных = Неопределено) Экспорт

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    Если ТипЗнч(ОбъектДляЗагрузки) = Тип("ПолеТабличногоДокумента") ИЛИ ТипЗнч(ОбъектДляЗагрузки) = Тип("ТабличныйДокумент") Тогда
        ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанных");
    Иначе
        ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
    КонецЕсли;

    Если ИсполняемыеНастройки = Неопределено Тогда

        ИсполняемыеНастройки = схемаСКД.НастройкиПоУмолчанию;

    КонецЕсли;

    Если СтруктураПараметров <> Неопределено Тогда

        КоллекцияЗначенийПараметров = ИсполняемыеНастройки.ПараметрыДанных.Элементы;

        Для каждого Параметр Из СтруктураПараметров Цикл

            НайденноеЗначениеПараметра = КоллекцияЗначенийПараметров.Найти(Параметр.Ключ);

            Если НайденноеЗначениеПараметра <> Неопределено Тогда

                НайденноеЗначениеПараметра.Использование = Истина;

                НайденноеЗначениеПараметра.Значение = Параметр.Значение;

            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    МакетКомпоновкиСКД = КомпоновщикМакета.Выполнить(схемаСКД, ИсполняемыеНастройки, РасшифровкаСКД, МакетКомпоновки, ТипГенератора);

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;

    ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиСКД, ВнешниеНаборыДанных, РасшифровкаСКД);

    Если ТипЗнч(ОбъектДляЗагрузки) = Тип("ПолеТабличногоДокумента") ИЛИ ТипЗнч(ОбъектДляЗагрузки) = Тип("ТабличныйДокумент") Тогда

        ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;

        ПроцессорВывода.УстановитьДокумент(ОбъектДляЗагрузки);

    Иначе

        ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

        ПроцессорВывода.УстановитьОбъект(ОбъектДляЗагрузки);

    КонецЕсли;

    ПроцессорВывода.ОтображатьПроцентВывода = Истина;

    результат1 = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

КонецПроцедуры // ПолучитьДанныеНаОснованииСКД()

Процедура УстановитьСостояниеСтруктурыГруппировкиОтчета(СтруктураГруппировки, Включена) Экспорт
	// Устанавливает состояние для структуры с подчиненными
	// Пример вызова:
	//	УстановитьСостояниеСтруктурыГруппировкиОтчета(КомпоновщикНастроек.Настройки.Структура[0], Ложь);
	
	СтруктураГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных[?(Включена, "Включен", "Отключен")];
	Для Каждого ПодчиненныйЭлемент Из СтруктураГруппировки.Структура Цикл
		УстановитьСостояниеСтруктурыГруппировкиОтчета(ПодчиненныйЭлемент, Включена);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиВКомпоновщикНастроекИзМакетаСКД(КомпоновщикНастроек, МакетСКД, Форма) Экспорт
	// взято из видеоурока http://курсы-по-1с.рф/news/2016-04-28-skd-free-video/
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетСКД, Форма.УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	
	
КонецПроцедуры

Процедура ДобавитьНаборДанныхВСКД_Пример(МакетСКД, ИмяНабора, МассивИменКолонок)
	
		ЗаменяемыйНаборДанных = МакетСКД.НаборыДанных.Найти(ИмяНабора);
		Если НЕ ЗаменяемыйНаборДанных = Неопределено Тогда
			МакетСКД.НаборыДанных.Удалить(ЗаменяемыйНаборДанных);
		КонецЕсли;
		
		НаборДанных = МакетСКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
		НаборДанных.Имя = ИмяНабора;
		НаборДанных.ИмяОбъекта = ИмяНабора;
		НаборДанных.ИсточникДанных = МакетСКД.ИсточникиДанных.Получить(0).Имя;
		
		Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
			Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = ИмяКолонки;
			Поле.Заголовок   = ИмяКолонки;
			Поле.ПутьКДанным = ИмяКолонки;
		КонецЦикла;
	
КонецПроцедуры

// Объектная модель СКД
Функция ПолучитьКоллекциюПараметровСКД(КомпоновщикНастроек)
	Результат = Новый Структура;
	
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Результат.Вставить(Элемент.Параметр, Элемент);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьКоллекциюВыбранныхПолейСКД(КомпоновщикНастроек)
	Результат = Новый Соответствие;
	Результат.Вставить("Поля", Новый Соответствие);
	Результат.Вставить("Группы", Новый Соответствие);
	
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если Элемент.Поле = Неопределено Тогда
			Результат["Группы"].Вставить(Элемент.Заголовок, Элемент);
		Иначе
			Результат["Поля"].Вставить(Строка(Элемент.Поле), Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции


// Работа с расшифорвками
Функция ПолучитьЗначениеПоИмениГруппировкиВРасшифровке(ИмяГруппировки, ДанныеРасшифровки, ТекущаяРасшифровка) Экспорт
	
	ПоляРасшифровки = ПолучитьПоляРасшифровкиВВидеТаблицы(ТекущаяРасшифровка, ДанныеРасшифровки);
	НайденнаяСтрока = ПоляРасшифровки.Найти(ИмяГруппировки, "Поле");
	Если Не НайденнаяСтрока = Неопределено Тогда
		Возврат НайденнаяСтрока.Значение;
	КонецЕсли;
	
	// Пример вызова:
	//Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	//	Склад = ПолучитьЗначениеПоИмениГруппировкиВРасшифровке("Склад", ДанныеРасшифровки, Расшифровка);
	//КонецПроцедуры
КонецФункции

Функция ПолучитьПоляРасшифровкиВВидеТаблицы(ТекущаяРасшифровка, ДанныеРасшифровки) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Уровень"); // уровень в группировки в СКД
	Результат.Колонки.Добавить("Поле"); // имя поля или группировки
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("Идентификатор"); // идентификаторв в коллекции ДанныеРасшифровки.Элементы
	
	ДобавитьПолеРасшифровкиВТаблицуРекурсивно(Результат, ТекущаяРасшифровка, ДанныеРасшифровки);
	
	Возврат Результат;
	
	// Пример вызова:
	//Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	//	ПоляРасшифорвки = ПолучитьПоляРасшифровкиВВидеТаблицы(Расшифровка, ДанныеРасшифровки);
	//КонецПроцедуры
КонецФункции

Процедура ДобавитьПолеРасшифровкиВТаблицуРекурсивно(ТаблицаРасшифровки, ТекущаяРасшифровка, ДанныеРасшифровки, Уровень = 0)
	
	ЭлементРасшифровки = ДанныеРасшифровки.Элементы[ТекущаяРасшифровка];
	
	УровеньРодителя = Уровень;
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		УровеньРодителя = УровеньРодителя + 1;
		
		МассивПолей = ЭлементРасшифровки.ПолучитьПоля();
		Для Каждого Поле Из МассивПолей Цикл
			НоваяСтрока = ТаблицаРасшифровки.Добавить();
			НоваяСтрока.Поле = Поле.Поле;
			НоваяСтрока.Значение = Поле.Значение;
			НоваяСтрока.Уровень = Уровень;
			НоваяСтрока.Идентификатор = ЭлементРасшифровки.Идентификатор;
			
		КонецЦикла;
	КонецЕсли;
	
	МассивРодителей = ЭлементРасшифровки.ПолучитьРодителей();
	Для Каждого Родитель Из МассивРодителей Цикл
		ДобавитьПолеРасшифровкиВТаблицуРекурсивно(
				ТаблицаРасшифровки, 
				Родитель.Идентификатор,
				ДанныеРасшифровки,
				УровеньРодителя);
	КонецЦикла;
	
КонецПроцедуры
