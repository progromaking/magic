
Процедура ВывестиСКДВТабличныйДокумент(МакетСКД, ТабличныйДокумент, КомпоновщикНастроек = Неопределено, ДанныеРасшифровки = Неопределено) 
	
	Если КомпоновщикНастроек = Неопределено Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);		
	КонецЕсли;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();  
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетСКД, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,ДанныеРасшифровки,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
// Пример вызова из отчета	
//Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь; 
//	ПрограммнаяРаботаССКД.ВывестиСКДВТабличныйДокумент(СхемаКомпоновкиДанных, ДокументРезультат, КомпоновщикНастроек);
//	
//КонецПроцедуры	
	
КонецПроцедуры

Функция ПолучитьТаблицуЗначенийИзСКД(МакетСКД, КомпоновщикНастроек) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();  
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетСКД, Настройки,,,
				Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат Результат;
	
КонецФункции


Процедура УстановитьЗначениеПараметра(ОтчетОбъект, ИмяПараметра, Значение) Экспорт
    
    ПараметрыОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных;
    
    Параметр = ПараметрыОтчета.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
    Параметр.Использование = Истина;
    Параметр.Значение = Значение;
    
КонецПроцедуры

Функция ПолучитьЗначениеПараметра(ОтчетОбъект, ИмяПараметра) Экспорт
    
    ПараметрыОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных;
    
    Параметр = ПараметрыОтчета.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
    Возврат Параметр.Значение;
    
КонецФункции


Процедура УстановитьЗначениеПараметраПользовательскихНастроек(ПользовательскиеНастройки, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	Для Каждого Элемент Из ПользовательскиеНастройки.Элементы Цикл
		Если НЕ ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ""+Элемент.Параметр = ИмяПараметра Тогда
			Продолжить;
		КонецЕсли;
		Элемент.Значение = ЗначениеПараметра;
		Элемент.Использование = Истина;
		
		Возврат;
		
	КонецЦикла;
	
	// пример вызова:
	// ПользовательскиеНастройки = ПолучитьПользовательскиеНастройкиОтчетаНаСервере("ГПН_СправкаОНаличииНПДляСобственника");
	// УстановитьЗначениеПараметраПользовательскиНастройки(ПользовательскиеНастройки, "Период", Дата(2016,1,1));
	
КонецПроцедуры

Процедура ДобавитьПараметрПользовательскихНастроек(СхемаКомпоновкиДанных, ИмяПараметра) Экспорт
	
	ПараметрКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыДанных.Элементы.Добавить();
    ПараметрКомпоновки.Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
    ПараметрКомпоновки.Использование = Истина;
	
	ПараметрСхемы = СхемаКомпоновкиДанных.Параметры.Добавить();
	ПараметрСхемы.Имя = ИмяПараметра;
	
КонецПроцедуры

Функция ПолучитьПользовательскиеНастройкиОтчетаНаСервере(ИмяОтчета) Экспорт
	ОтчетОбъект = Отчеты[ИмяОтчета].Создать();
	Возврат ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
КонецФункции

// {{****************************************************************************
//    ШАБЛОНЫ ДЛЯ ИСПОЛЬЗОВАНИЯ СКД - http://infostart.ru/public/80164/
// 
//****************************************************************************
// Заполняет переданный объект на основании СКД
//
// Параметры
//
//  схемаСКД – схема СКД
//
//  ОбъектДляЗагрузки – объект в который выгружаются данные, таблица значений, дерево значений, табличный документ
//
//  ИсполняемыеНастройки – Пользовательские настройки СКД, если не указаны, будут использованы настройки СКД по умолчанию
//
//  СтруктураПараметров - Структура – Передаваемые для СКД параметры
//
//	В итоге получение данных сводится к трем простым действиям:
//		1. Написать запрос и настроить СКД  
//	в любой консоли, позволяющей это сделать.
//		2. Выгрузить настройки из консоли и загрузить в макет
//		3. Написать в необходимом месте код типа:
//
//		ДеревоЗначений = Новый ДеревоЗначений;
//		СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
//		СтруктураПараметров = Новый Структура("ДатаОтчета", НашаДата);
//		ПолучитьДанныеНаОснованииСКД(СхемаКомпоновкиДанных, ДеревоЗначений, СхемаКомпоновкиДанных.НастройкиПоУмолчанию, СтруктураПараметров);
//
Процедура ПолучитьДанныеНаОснованииСКД(схемаСКД, ОбъектДляЗагрузки, ИсполняемыеНастройки = Неопределено, СтруктураПараметров = Неопределено, РасшифровкаСКД = Неопределено, МакетКомпоновки = Неопределено, ВнешниеНаборыДанных = Неопределено) Экспорт

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    Если ТипЗнч(ОбъектДляЗагрузки) = Тип("ПолеТабличногоДокумента") ИЛИ ТипЗнч(ОбъектДляЗагрузки) = Тип("ТабличныйДокумент") Тогда
        ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанных");
    Иначе
        ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
    КонецЕсли;

    Если ИсполняемыеНастройки = Неопределено Тогда

        ИсполняемыеНастройки = схемаСКД.НастройкиПоУмолчанию;

    КонецЕсли;

    Если СтруктураПараметров <> Неопределено Тогда

        КоллекцияЗначенийПараметров = ИсполняемыеНастройки.ПараметрыДанных.Элементы;

        Для каждого Параметр Из СтруктураПараметров Цикл

            НайденноеЗначениеПараметра = КоллекцияЗначенийПараметров.Найти(Параметр.Ключ);

            Если НайденноеЗначениеПараметра <> Неопределено Тогда

                НайденноеЗначениеПараметра.Использование = Истина;

                НайденноеЗначениеПараметра.Значение = Параметр.Значение;

            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    МакетКомпоновкиСКД = КомпоновщикМакета.Выполнить(схемаСКД, ИсполняемыеНастройки, РасшифровкаСКД, МакетКомпоновки, ТипГенератора);

    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;

    ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиСКД, ВнешниеНаборыДанных, РасшифровкаСКД);

    Если ТипЗнч(ОбъектДляЗагрузки) = Тип("ПолеТабличногоДокумента") ИЛИ ТипЗнч(ОбъектДляЗагрузки) = Тип("ТабличныйДокумент") Тогда

        ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;

        ПроцессорВывода.УстановитьДокумент(ОбъектДляЗагрузки);

    Иначе

        ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

        ПроцессорВывода.УстановитьОбъект(ОбъектДляЗагрузки);

    КонецЕсли;

    ПроцессорВывода.ОтображатьПроцентВывода = Истина;

    результат1 = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

КонецПроцедуры // ПолучитьДанныеНаОснованииСКД()

Процедура УстановитьСостояниеСтруктурыГруппировкиОтчета(СтруктураГруппировки, Включена) Экспорт
	// Устанавливает состояние для структуры с подчиненными
	// Пример вызова:
	//	УстановитьСостояниеСтруктурыГруппировкиОтчета(КомпоновщикНастроек.Настройки.Структура[0], Ложь);
	
	СтруктураГруппировки.Состояние = СостояниеЭлементаНастройкиКомпоновкиДанных[?(Включена, "Включен", "Отключен")];
	Для Каждого ПодчиненныйЭлемент Из СтруктураГруппировки.Структура Цикл
		УстановитьСостояниеСтруктурыГруппировкиОтчета(ПодчиненныйЭлемент, Включена);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиВКомпоновщикНастроекИзМакетаСКД(КомпоновщикНастроек, МакетСКД, Форма) Экспорт
	// взято из видеоурока http://курсы-по-1с.рф/news/2016-04-28-skd-free-video/
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетСКД, Форма.УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
	
	
КонецПроцедуры

Процедура ДобавитьНаборДанныхВСКД_Пример(МакетСКД, ИмяНабора, МассивИменКолонок)
	
		ЗаменяемыйНаборДанных = МакетСКД.НаборыДанных.Найти(ИмяНабора);
		Если НЕ ЗаменяемыйНаборДанных = Неопределено Тогда
			МакетСКД.НаборыДанных.Удалить(ЗаменяемыйНаборДанных);
		КонецЕсли;
		
		НаборДанных = МакетСКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
		НаборДанных.Имя = ИмяНабора;
		НаборДанных.ИмяОбъекта = ИмяНабора;
		НаборДанных.ИсточникДанных = МакетСКД.ИсточникиДанных.Получить(0).Имя;
		
		Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
			Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			Поле.Поле = ИмяКолонки;
			Поле.Заголовок   = ИмяКолонки;
			Поле.ПутьКДанным = ИмяКолонки;
		КонецЦикла;
	
КонецПроцедуры

// Объектная модель СКД
Функция ПолучитьКоллекциюПараметровСКД(КомпоновщикНастроек)
	Результат = Новый Структура;
	
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		Результат.Вставить(Элемент.Параметр, Элемент);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьКоллекциюВыбранныхПолейСКД(КомпоновщикНастроек)
	Результат = Новый Соответствие;
	Результат.Вставить("Поля", Новый Соответствие);
	Результат.Вставить("Группы", Новый Соответствие);
	
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Выбор.Элементы Цикл
		Если Элемент.Поле = Неопределено Тогда
			Результат["Группы"].Вставить(Элемент.Заголовок, Элемент);
		Иначе
			Результат["Поля"].Вставить(Строка(Элемент.Поле), Элемент);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьКоллекциюГруппировок(Настройки) Экспорт
	
	Коллекция = Новый Соответствие;
	
	ЗаполнитьКоллекциюГруппировокРекурсивно(Настройки.Структура, Коллекция);
	
	Возврат Коллекция;
	
КонецФункции
Процедура ЗаполнитьКоллекциюГруппировокРекурсивно(Элементы, Коллекция)
	
	Для Каждого ЭлементСтруктуры Из Элементы Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Ключ = "Таблица";
			
			Коллекция.Вставить(Ключ, ЭлементСтруктуры);
			
			ЗаполнитьКоллекциюГруппировокРекурсивно(ЭлементСтруктуры.Строки, Коллекция);
			ЗаполнитьКоллекциюГруппировокРекурсивно(ЭлементСтруктуры.Колонки, Коллекция);
			Продолжить;
			
		КонецЕсли;
		
		Ключ = "";
		Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
			Если НЕ ПустаяСтрока(Ключ) Тогда
				Ключ = Ключ + ",";
			КонецЕсли;
			
			Ключ = Ключ + ПолеГруппировки.Поле; 
		КонецЦикла;
		
		Коллекция.Вставить(Ключ, ЭлементСтруктуры);
		ЗаполнитьКоллекциюГруппировокРекурсивно(ЭлементСтруктуры.Структура, Коллекция);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКоллекциюОтборовДляГруппировки(Группировка) Экспорт
	
	Коллекция = Новый Соответствие;
	
	Ключ = "";
	Для Каждого ЭлементОтбора Из Группировка.Отбор.Элементы Цикл
		Если НЕ ПустаяСтрока(Ключ) Тогда
			Ключ = Ключ + ",";
		КонецЕсли;
		
		Ключ = Ключ + ЭлементОтбора.ЛевоеЗначение;
		Коллекция.Вставить(Ключ, ЭлементОтбора);
	КонецЦикла;
	
	Возврат Коллекция;
	
КонецФункции


Функция ПолучитьКоллекциюПользовательскихНастроекСКД(Компоновщик)
	
	КоллекцияЭлементов = Компоновщик.ПользовательскиеНастройки.Элементы;
	Возврат ПолучитьКоллекциюЭлементовСКД(КоллекцияЭлементов);
	
КонецФункции

Функция ПолучитьКоллекциюЭлементовСКД(КоллекцияЭлементов)
	КоллекцияРезультат = Новый Структура;
	
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		КлючЭлементаКоллекции = "" + Элемент.Параметр;
		Если ПустаяСтрока(КлючЭлементаКоллекции) Тогда
			Продолжить;
		КонецЕсли;
		КоллекцияРезультат.Вставить(КлючЭлементаКоллекции, Элемент);
	КонецЦикла;
	
	Возврат КоллекцияРезультат;
КонецФункции


// Работа с расшифорвками
Функция ПолучитьЗначениеПоИмениГруппировкиВРасшифровке(ИмяГруппировки, ДанныеРасшифровки, ТекущаяРасшифровка) Экспорт
	
	ПоляРасшифровки = ПолучитьПоляРасшифровкиВВидеТаблицы(ТекущаяРасшифровка, ДанныеРасшифровки);
	НайденнаяСтрока = ПоляРасшифровки.Найти(ИмяГруппировки, "Поле");
	Если Не НайденнаяСтрока = Неопределено Тогда
		Возврат НайденнаяСтрока.Значение;
	КонецЕсли;
	
	// Пример вызова:
	//Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	//	Склад = ПолучитьЗначениеПоИмениГруппировкиВРасшифровке("Склад", ДанныеРасшифровки, Расшифровка);
	//КонецПроцедуры
КонецФункции

Функция ПолучитьПоляРасшифровкиВВидеТаблицы(ТекущаяРасшифровка, ДанныеРасшифровки) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Уровень"); // уровень в группировки в СКД
	Результат.Колонки.Добавить("Поле"); // имя поля или группировки
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("Идентификатор"); // идентификаторв в коллекции ДанныеРасшифровки.Элементы
	
	ДобавитьПолеРасшифровкиВТаблицуРекурсивно(Результат, ТекущаяРасшифровка, ДанныеРасшифровки);
	
	Возврат Результат;
	
	// Пример вызова:
	//Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	//	ПоляРасшифорвки = ПолучитьПоляРасшифровкиВВидеТаблицы(Расшифровка, ДанныеРасшифровки);
	//КонецПроцедуры
КонецФункции

Процедура ДобавитьПолеРасшифровкиВТаблицуРекурсивно(ТаблицаРасшифровки, ТекущаяРасшифровка, ДанныеРасшифровки, Уровень = 0)
	
	ЭлементРасшифровки = ДанныеРасшифровки.Элементы[ТекущаяРасшифровка];
	
	УровеньРодителя = Уровень;
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		УровеньРодителя = УровеньРодителя + 1;
		
		МассивПолей = ЭлементРасшифровки.ПолучитьПоля();
		Для Каждого Поле Из МассивПолей Цикл
			НоваяСтрока = ТаблицаРасшифровки.Добавить();
			НоваяСтрока.Поле = Поле.Поле;
			НоваяСтрока.Значение = Поле.Значение;
			НоваяСтрока.Уровень = Уровень;
			НоваяСтрока.Идентификатор = ЭлементРасшифровки.Идентификатор;
			
		КонецЦикла;
	КонецЕсли;
	
	МассивРодителей = ЭлементРасшифровки.ПолучитьРодителей();
	Для Каждого Родитель Из МассивРодителей Цикл
		ДобавитьПолеРасшифровкиВТаблицуРекурсивно(
				ТаблицаРасшифровки, 
				Родитель.Идентификатор,
				ДанныеРасшифровки,
				УровеньРодителя);
	КонецЦикла;
	
КонецПроцедуры

Функция СкопироватьЭлементКомпоновкиДанных(ИсходныйЭлемент, НовыйРодитель)
	
	Если ТипЗнч(ИсходныйЭлемент) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		
		КопияЭлемента = НовыйРодитель.Структура.Добавить(ТипЗнч(ИсходныйЭлемент));
		
		// свойства
		КопияЭлемента.Использование = ИсходныйЭлемент.Использование; 
		КопияЭлемента.Имя = ИсходныйЭлемент.Имя; 
		
		// поля группировки
		Для каждого Элемент Из ИсходныйЭлемент.ПоляГруппировки.Элементы Цикл 
			СкопироватьЭлементКомпоновкиДанных(Элемент, КопияЭлемента.ПоляГруппировки.Элементы);
		КонецЦикла;
		
		// выбранные поля
		Для каждого Элемент Из ИсходныйЭлемент.Выбор.Элементы Цикл 
			СкопироватьЭлементКомпоновкиДанных(Элемент, КопияЭлемента.Выбор.Элементы);
		КонецЦикла;
		
		// отборы
		Для каждого Элемент Из ИсходныйЭлемент.Отбор.Элементы Цикл 
			СкопироватьЭлементКомпоновкиДанных(Элемент, КопияЭлемента.Отбор.Элементы);
		КонецЦикла;
		
		// порядок
		Для каждого Элемент Из ИсходныйЭлемент.Порядок.Элементы Цикл 
			СкопироватьЭлементКомпоновкиДанных(Элемент, КопияЭлемента.Порядок.Элементы);
		КонецЦикла;
		
		// условное оформление
		Для каждого Элемент Из ИсходныйЭлемент.УсловноеОформление.Элементы Цикл 
			СкопироватьЭлементКомпоновкиДанных(Элемент, КопияЭлемента.УсловноеОформление.Элементы);
		КонецЦикла;
		
		// параметры вывода
		Для каждого Элемент Из ИсходныйЭлемент.ПараметрыВывода.Элементы Цикл 
			СкопироватьЭлементКомпоновкиДанных(Элемент, КопияЭлемента.ПараметрыВывода.Элементы);
		КонецЦикла;
		
		// подчиненные группировки
		Для каждого Элемент Из ИсходныйЭлемент.Структура Цикл 
			СкопироватьЭлементКомпоновкиДанных(Элемент, КопияЭлемента);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ИсходныйЭлемент) = Тип("ОтборКомпоновкиДанных") Тогда
		
		Для каждого Элемент Из ИсходныйЭлемент.Элементы Цикл 
			СкопироватьЭлементКомпоновкиДанных(Элемент, НовыйРодитель.Элементы);
		КонецЦикла;
		
	ИначеЕсли  	ТипЗнч(ИсходныйЭлемент) = Тип("ПолеГруппировкиКомпоновкиДанных")
			ИЛИ ТипЗнч(ИсходныйЭлемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных")
			ИЛИ ТипЗнч(ИсходныйЭлемент) = Тип("ВыбранноеПолеКомпоновкиДанных")
			ИЛИ ТипЗнч(ИсходныйЭлемент) = Тип("ЭлементОтбораКомпоновкиДанных")
			ИЛИ ТипЗнч(ИсходныйЭлемент) = Тип("ЭлементПорядкаКомпоновкиДанных")
			ИЛИ ТипЗнч(ИсходныйЭлемент) = Тип("АвтоЭлементПорядкаКомпоновкиДанных")
		Тогда
		
		КопияЭлемента = НовыйРодитель.Добавить(ТипЗнч(ИсходныйЭлемент));
		ЗаполнитьЗначенияСвойств(КопияЭлемента, ИсходныйЭлемент);
		
		
	ИначеЕсли   ТипЗнч(ИсходныйЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных")
			ИЛИ ТипЗнч(ИсходныйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
		Тогда
		
		КопияЭлемента = НовыйРодитель.Добавить(ТипЗнч(ИсходныйЭлемент));
		ЗаполнитьЗначенияСвойств(КопияЭлемента, ИсходныйЭлемент);
		
		Для Каждого Элемент Из ИсходныйЭлемент.Элементы Цикл
			СкопироватьЭлементКомпоновкиДанных(Элемент, КопияЭлемента.Элементы);
		КонецЦикла;
		
		
	ИначеЕсли   ТипЗнч(ИсходныйЭлемент) = Тип("ОформляемоеПолеКомпоновкиДанных") Тогда
		
		КопияЭлемента = НовыйРодитель.Добавить();
		ЗаполнитьЗначенияСвойств(КопияЭлемента, ИсходныйЭлемент);
		
	ИначеЕсли ТипЗнч(ИсходныйЭлемент) = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		
		КопияЭлемента = НовыйРодитель.Добавить();
		ЗаполнитьЗначенияСвойств(КопияЭлемента, ИсходныйЭлемент);
		
		// отборы
		Для каждого Элемент Из ИсходныйЭлемент.Отбор.Элементы Цикл 
			СкопироватьЭлементКомпоновкиДанных(Элемент, КопияЭлемента.Отбор.Элементы);
		КонецЦикла;
		
		// поля
		Для каждого Элемент Из ИсходныйЭлемент.Поля.Элементы Цикл 
			СкопироватьЭлементКомпоновкиДанных(Элемент, КопияЭлемента.Поля.Элементы);
		КонецЦикла;
		
		// оформление
		Для каждого Элемент Из ИсходныйЭлемент.Оформление.Элементы Цикл 
			СкопироватьЭлементКомпоновкиДанных(Элемент, КопияЭлемента.Оформление.Элементы);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ИсходныйЭлемент) = Тип("ЗначениеПараметраКомпоновкиДанных") 
		ИЛИ ТипЗнч(ИсходныйЭлемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") 
		Тогда
		
		КопияЭлемента = НовыйРодитель.Найти(Строка(ИсходныйЭлемент.Параметр));
		ЗаполнитьЗначенияСвойств(КопияЭлемента, ИсходныйЭлемент);
		
		Для Каждого Элемент Из ИсходныйЭлемент.ЗначенияВложенныхПараметров Цикл
			СкопироватьЭлементКомпоновкиДанных(Элемент, КопияЭлемента.ЗначенияВложенныхПараметров);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КопияЭлемента;
	
КонецФункции

Функция СкопироватьОтборКомпоновкиДанных(ИсходныйЭлемент, НовыйРодитель)
	
	Если ТипЗнч(ИсходныйЭлемент) = Тип("ОтборКомпоновкиДанных") Тогда
		
		Для каждого Элемент Из ИсходныйЭлемент.Элементы Цикл 
			СкопироватьОтборКомпоновкиДанных(Элемент, НовыйРодитель.Элементы);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ИсходныйЭлемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		
		КопияЭлемента = НовыйРодитель.Добавить(ТипЗнч(ИсходныйЭлемент));
		ЗаполнитьЗначенияСвойств(КопияЭлемента, ИсходныйЭлемент);
		
		
	ИначеЕсли ТипЗнч(ИсходныйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		
		КопияЭлемента = НовыйРодитель.Добавить(ТипЗнч(ИсходныйЭлемент));
		ЗаполнитьЗначенияСвойств(КопияЭлемента, ИсходныйЭлемент);
		
		Для Каждого Элемент Из ИсходныйЭлемент.Элементы Цикл
			СкопироватьОтборКомпоновкиДанных(Элемент, КопияЭлемента.Элементы);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КопияЭлемента;
	
КонецФункции

Функция ВывестиТаблицуЗначенийВОтчет(ВыгружаемаяТаблица)
	Схема = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = Схема.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	// Набор данных
	НаборДанных = Схема.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	НаборДанных.Имя = "ВыгружаемаяТаблица";
	НаборДанных.ИмяОбъекта = "ВыгружаемаяТаблица";
	
	Для Каждого Колонка Из ВыгружаемаяТаблица.Колонки Цикл
		НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = Колонка.Имя;
		НовоеПоле.ПутьКДанным = НовоеПоле.Поле;
		НовоеПоле.Заголовок = Колонка.Заголовок;
		НовоеПоле.ТипЗначения = Колонка.ТипЗначения;
	КонецЦикла;
	
	// Группировки
	ГруппировкаДанных = Схема.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДанных.Использование = Истина;
	
	Для Каждого Колонка Из ВыгружаемаяТаблица.Колонки Цикл
		ПолеГруппировки = ГруппировкаДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя);
	КонецЦикла;
	
	АвтоПоле = ГруппировкаДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	АвтоПоле.Использование = Истина;
	
	// Вывод
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Схема.НастройкиПоУмолчанию);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,Новый Структура(НаборДанных.ИмяОбъекта, ВыгружаемаяТаблица));
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТабличныйДокумент;
КонецФункции

Процедура ИнициализироватьКомпоновщик(Схема, Компоновщик)
	
	АдресВременногоХранилищаСхемы = ПоместитьВоВременноеХранилище(Схема, Новый УникальныйИдентификатор);
	Источник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилищаСхемы);
	Компоновщик.Инициализировать(Источник);
	
КонецПроцедуры
